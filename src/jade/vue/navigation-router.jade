extends ../_internal-template

block vars
  - var activeLink = 'vue';
  - var title = 'Navigation Router | Framework7 Vue Documentation';

block content
  .docs-wrap
    .docs-nav
      include ../_docs-vue-menu
    .docs-content
      h1 Navigation Router
      p With Framework7 & Vue.js, we are already composing our application with components. All we need to do is map our components to the routes. Here's a basic example:
      pre
        code
          :code
            <!-- Current View/Router -->
            <f7-view>
              <!-- All pages are rendered inside of Pages -->
              <f7-pages>
                <!-- Initial Page -->
                <f7-page>
                  ...
                  <f7-link href="/about/">About App</f7-link>
                  <f7-link href="/login/">Login</f7-link>
                </f7-page>
              </f7-pages>
            </f7-view>
      p Now we need to map components to routes. It should be done in <b>routes</b> parameter on <a href="init-app.html">App Initialization</a>
      pre
        code
          :code
            // Create Component for About page
            Vue.component('page-about', {
                template: '<f7-page name="about">...</f7-page>'
            })
            // Create Component for Login page
            Vue.component('page-login', {
                template: '<f7-page name="login">...</f7-page>'
            })

            // Init App
            new Vue({
                el: '#app',
                framework7: {
                    root: '#app',
                    // Map routes
                    routes: [
                        {
                            path: '/about/',
                            component: 'page-about'
                        },
                        {
                            path: '/login/',
                            component: 'page-login'
                        }
                    ]
                }
            })
      p If you use single file components (with Webpack or Browserify):
      pre
        code
          :code
            <!-- about.vue -->
            <template>
              <f7-page name="about">
                <!-- Page content -->
              </f7-page>
            </template>
            <script>
              export default {}
            </script>

            <!-- login.vue -->
            <template>
              <f7-page name="login">
                <!-- Page content -->
              </f7-page>
            </template>
            <script>
              export default {}
            </script>
      pre
        code
          :code
            import AboutPage from 'about.vue'
            import LoginPage from 'login.vue'

            // Init App
            new Vue({
                el: '#app',
                framework7: {
                    root: '#app',
                    // Map routes
                    routes: [
                        {
                            path: '/about/',
                            component: AboutPage
                        },
                        {
                            path: '/login/',
                            component: LoginPage
                        }
                    ]
                }
            })
      .important-note
        ul
          li
            p Note that route components are intended to load <a href="page.html">Page</a> components only. If you want to load other components in a route, they must be added as <a href="#nested-routes">nested routes</a> within a page route.
          li
            p All pages are rendered inside of the <a href="pages.html">Pages</a> component of the current (or specified) <a href="view.html">View</a>
          li
            p Only one Pages component is allowed inside of one View
          li
            p You may have as many Views as required (e.g. in Popup, in Side Panels)
      h2 Dynamic Route Matching
      p Very often we will need to map routes with the given pattern to the same component. In specified <b>routes</b> we can use a dynamic segment in the path to achieve that.
      P Let's say we have the following link:
      pre
        code
          :code
            <f7-link href="/user/45/posts/28/?sort=first#opened">Read More</f7-link>
      p And the following pattern in specified route path:
      pre
        code
          :code
            import PostPage from 'post.vue'

            // Init App
            new Vue({
                el: '#app',
                framework7: {
                    root: '#app',
                    // Map routes
                    routes: [
                        {
                            // We can use pattern here:
                            path: '/user/:userId/posts/:postId',
                            component: PostPage
                        }
                    ]
                }
            })
      p In this case we have access to <b>$route</b> component property that we can use, e.g. in post.vue:
      pre
        code
          :code
            <!-- post.vue -->
            <template>
              <f7-page>
                <f7-navbar title="Post"></f7-navbar>
                <ul>
                  <li>Route: {{$route.route}}</li>
                  <li>Url: {{$route.url}}</li>
                  <li>Path: {{$route.path}}</li>
                  <li>User ID: {{$route.params.userId}}</li>
                  <li>Post ID: {{$route.params.postId}}</li>
                  <li>Query: {{JSON.stringify($route.query)}}</li>
                  <li>Hash: {{$route.hash}}
                </ul>
                <!-- $route.params are also passed as component props: -->
                <p>User ID: {{userId}}</p>
                <p>Post ID: {{postId}}</p>
              </f7-page>
            </template>
            <script>
              <!-- $route.params are also passed as component props: -->
              export default {
                props: ['userId', 'postId']
              }
            </script>
      p And the output will be:
      pre
        code
          :code
            ...
            <ul>
              <li>Route: /user/:userId/posts/:postId</li>
              <li>Url: /user/45/posts/28/?sort=first#opened</li>
              <li>Path: /user/45/posts/28/</li>
              <li>User ID: 45</li>
              <li>Post ID: 28</li>
              <li>Query: {"sort":"first"}</li>
              <li>Hash: opened</li>
            </ul>
            <p>User ID: 45</p>
            <p>Post ID: 28</p>
            ...
      p <b>$route</b> has the following properties:
      table.methods-table
        tbody
          tr
            td $route.url
            td Url of the loaded route/page
          tr
            td $route.params
            td Object with route parameters (e.g. userId and postId in the example above)
          tr
            td $route.hash
            td Route hash
          tr
            td $route.query
            td Parsed query object
          tr
            td $route.path
            td Route path (same as <b>$route.url</b> but without query and hash)
          tr
            td $route.route
            td Matched route from specified <b>routes</b> parameter
      h2 Nested Routes
      p Child components within a page can be controlled via routes. Currently, this is only supported for tabs, but other components may be added in the future.
      h4 Tabs
      p The child components that render within a tab on a page can be controlled via routes. For example, consider these Vue components:
      pre
        code
          :code
            <!-- Tabs.vue -->
            <template>
              <f7-page with-subnavbar>
                <f7-navbar back-link="Back" title="Tab Routes" sliding>
                  <f7-subnavbar sliding>
                    <f7-buttons>
                      <f7-button route-tab-link="#tab1" href="/tabs/">Tab 1</f7-button>
                      <f7-button route-tab-link="#tab2" href="/tabs/tab-2/">Tab 2</f7-button>
                      <f7-button route-tab-link="#tab3" href="/tabs/tab-3/">Tab 3</f7-button>
                    </f7-buttons>
                  </f7-subnavbar>
                </f7-navbar>

                <f7-tabs>
                  <f7-tab route-tab-id="tab1" />
                  <f7-tab route-tab-id="tab2" />
                  <f7-tab route-tab-id="tab3" />
                </f7-tabs>
              </f7-page>
            </template>

            <!-- Tab1Content.vue -->
            <template>
                <p>Tab 1 Content</p>
            </template>

            <!-- Tab2Content.vue -->
            <template>
                <p>Tab 2 Content</p>
            </template>

            <!-- Tab3Content.vue -->
            <template>
                <p>Tab 3 Content</p>
            </template>

      p With the route definitions below, the URL can control which tab content component gets rendered:
      pre
        code
          :code
            var routes = [
              ...
              {
                path: '/tabs/',
                component: Tabs,
                tabs: [
                  {
                    path: '/',
                    tabId: 'tab1',
                    component: Tab1Content
                  },
                  {
                    path: '/tab-2/',
                    tabId: 'tab2',
                    component: Tab2Content
                  },
                  {
                    path: '/tab-3/',
                    tabId: 'tab3',
                    component: Tab3Content
                  }
                ]
              }
              ...
            ];
      p Here are the results for different URL paths beneath the Tabs page URL:
      table.methods-table
          thead
            tr
              th Url
              th Result
          tbody
            tr
              td /tabs/
              td Go to the tabs page (or stay on it if already there), show tab 1 as the selected tab f7-button, have the Tab1Content component rendered within the tab1 f7-tab, and make that the visible tab.
            tr
              td /tabs/tab-2/
              td Go to the tabs page (or stay on it if already there), show tab 2 as the selected tab f7-button, have the Tab1Content component rendered within the tab2 f7-tab, and make that the visible tab.
            tr
              td /tabs/tab-3/
              td Go to the tabs page (or stay on it if already there), show tab 2 as the selected tab f7-button, have the Tab1Content component rendered within the tab3 f7-tab, and make that the visible tab.
      p It is also possible to have multiple child routes for a tab route:
      pre
        code
          :code
            var routes = [
              ...
              {
                path: '/tabs/',
                component: Tabs,
                tabs: [
                  {
                    path: '/',
                    tabId: 'tab1',
                    component: Tab1Content
                  },
                  {
                    path: '/tab-2/',
                    tabId: 'tab2',
                    component: Tab2Content
                  },
                  {
                    path: '/tab-3/',
                    tabId: 'tab3',
                    routes: [
                      {
                        path: '/',
                        component: Tab3Content
                      },
                      {
                        path: '/tab3-alternate-content/',
                        component: Tab3AlternateContent
                      }
                    ]
                  }
                ]
              }
              ...
            ];
      p Here are the results for URL paths that target the different child routes of the tab3 route:
      table.methods-table
          thead
            tr
              th Url
              th Result
          tbody
            tr
              td /tabs/tab3/
              td Go to the tabs page and show the tab 3 as the selected tab and have the Tab3Content component rendered within it.
            tr
              td /tabs/tab-3/tab-3-alternate-content/
              td Go to the tabs page and show tab 3 as the selected tab and have the Tab3AlternateContent component rendered within it. If already on the tabs page with different tab content showing, replace the current tab3 content with Tab3AlternateContent.
      p Tab routes are also supported on Tabbars:
      pre
        code
          :code
            <!-- Tabbar.vue -->
            <template>
              <f7-page tabbar-fixed>
                <f7-navbar back-link="Back" title="Tabbar Routes" sliding></f7-navbar>

                <f7-block tabs>
                  <f7-tab route-tab-id="tab1" />
                  <f7-tab route-tab-id="tab2" />
                  <f7-tab route-tab-id="tab3" />
                </f7-block>

                <f7-toolbar tabbar labels>
                  <f7-link href="/tabbar/" route-tab-link="#tab1" text="Tab 1"></f7-link>
                  <f7-link href="/tabbar/tab-2/" route-tab-link="#tab2" text="Tab 2"></f7-link>
                  <f7-link href="/tabbar/tab-3/" route-tab-link="#tab3" text="Tab 3"></f7-link>
                </f7-toolbar>

              </f7-page>
            </template>
      h2 Router API
      p To access router instance and use <a href="../docs/router-api.html">Router API</a> you can use special <b>$router</b> property of component:
      pre
        code
          :code
            <f7-link @click="$router.load({url: '/about/'})">About</f7-link>
            <f7-link @click="$router.back()">Go Back</f7-link>
      .important-note
        p Please note, that <b>$route</b> and <b>$router</b> component properties are only available inside of custom page components (and their child components) that you load according to routes. In parent components (like in View, or where you init your Vue app instance) they are not accessible as your app may have few routers (Views) at a time. So in this case use access to initialized <a href="view.html#access-to-initialized-instance">View Instance</a>, e.g. <code>$f7.views.main.router</code> or <code>$f7.mainView.router</code>
