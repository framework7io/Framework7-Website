extends ../_internal-template

block vars
  - var activeLink = 'vue';
  - var title = 'Virtual List Vue Component | Framework7 Vue Documentation';

block content
  .docs-wrap
    .docs-nav
      include ../_docs-vue-menu
    .docs-content
      h1 Virtual List Vue Component
      p Virtual List is not a separate component, but just a particular case of using <a href="list.html">&lt;f7-list&gt;</a>, <a href="list-item.html">&lt;f7-list-item&gt;</a> Vue components and special Framework7's <a href="../docs/virtual-list.html">Virtual List</a> component.
      h2 Usage example
      p Here is the full page example with Virtual List and Search Bar to search through Virtual List items:
      pre
        code
          :code
            <template>
                <f7-page>
                  <f7-navbar back-link="Back" title="Virtual List" sliding>
                    <f7-nav-right>
                      <!-- Add new VL item on click -->
                      <f7-link @click="addNewItem">New Item</f7-link>
                    </f7-nav-right>
                  </f7-navbar>
                  <!--
                    Searchbar to search thorugh VL Items
                    List to search specified in "search-list" prop
                  -->
                  <f7-searchbar cancel-link="Cancel" search-list="#search-list"></f7-searchbar>

                  <!-- This block will become visible when there is nothing found -->
                  <f7-list class="searchbar-not-found">
                    <f7-list-item title="Nothing found"></f7-list-item>
                  </f7-list>

                  <!-- Search through this list -->
                  <f7-list
                    id="search-list"
                    class="searchbar-found"
                    media-list
                    virtual
                    :virtual-items="items"
                    :virtual-height="63"
                    :virtual-search-all="searchAll"
                    >
                    <!-- Templte 7 Virtual List Item Template -->
                    <t7-template>
                      <f7-list-item media-item link="#" :title="'{{title}}'" :subtitle="'{{subtitle}}' "></f7-list-item>
                    </t7-template>
                  </f7-list>
                </f7-page>
              </template>
              <script>
                export default {
                  data: function () {
                    var items = [];
                    for (var i = 1; i <= 10000; i++) {
                      items.push({
                        title: 'Item ' + i,
                        subtitle: 'Subtitle ' + i
                      })
                    }
                    return {
                      items: items
                    }
                  },
                  methods: {
                    // Method to add new item
                    addNewItem: function () {
                      var self = this;
                      self.items.push({
                        title: 'Item ' + (self.items.length + 1),
                        subtitle: 'Subtitle ' + (self.items.length + 1),
                      })
                    },
                    // Function to proceed search results
                    searchAll: function (query) {
                      var self = this;
                      var found = [];
                      for (var i = 0; i < self.items.length; i++) {
                          if (self.items[i].title.indexOf(query) >= 0 || query.trim() === '') found.push(i);
                      }
                      return found;
                    }
                  }
                }
              </script>
      h2 Properties
      table.params-table
        thead
          tr
            th Prop
            th Type
            th Default
            th Description
        tbody
          tr
            th(colspan="4") &lt;f7-list&gt; <a href="virtual-list.html">Virtual List</a> specific properties
          tr
            td virtual
            td boolean
            td
            td Enables Virtual List
          tr
            td virtual-init
            td boolean
            td true
            td Initializes Virtual List
          tr
            td virtual-items
            td array/object
            td
            td Array with list items
          tr
            td virtual-height
            td number/function
            td
            td If <b>number</b> - item height in px. If <b>function</b> then function should return item height
          tr
            td virtual-rows-before
            td number
            td
            td Amount of rows (items) to be rendered before current screen scroll position. By default it is equal to double amount of rows (items) that fit to screen
          tr
            td virtual-rows-after
            td number
            td
            td Amount of rows (items) to be rendered after current screen scroll position. By default it is equal to the amount of rows (items) that fit to screen
          tr
            td virtual-cols
            td number
            td 1
            td Number of items per row. Doesn't compatible when using Virtual List with dynamic height
          tr
            td virtual-cache
            td boolean
            td true
            td Disable or enable DOM cache for already rendered list items. In this case each item will be rendered only once and all futher manipulations will be with DOM element. It is useful if your list items have some user interaction elements (like form elements or swipe outs) or could be modified
          tr
            td virtual-filtered-only
            td boolean
            td false
            td Option to show filtered items only set by `filter()` method
          tr
            td virtual-search-by-item
            td function(query, index, item)
            td
            td Search function that will be used by Search Bar, it receives search query, item index and item itself. If item matches to search query you need to return <code>true</code>, otherwise this function should return <code>false</code>
          tr
            td virtual-search-all
            td function(query, items)
            td
            td Search function that will be used by Search Bar, it receives search query and array with all items. You need to loop through items and return array with indexes of matched items
          tr
            td virtual-render-item
            td function(index, item)
            td
            td This optional function allows to use custom function to render item HTML. It could be used instead of <b>template</b> parameter
      h2 Events
      table.events-table
        thead
          tr
            th Event
            th Description
        tbody
          tr
            td virtual:itemsbeforeinsert
            td Event will be triggered after current DOM list will be removed and before new document will be inserted
          tr
            td virtual:itemsafterinsert
            td Event will be triggered after new document fragment with items inserted
          tr
            td virtual:itembeforeinsert
            td Event will be triggered before item will be added to virtual document fragment
          tr
            td virtual:beforeclear
            td Event will be triggered before current DOM list will be removed and replaced with new document fragment
      h2 Access To Virtual List Initialized Instance
      p If you use automatic initalization to init the Virtual List (with <code>virtual-init:true</code> prop) and need to use its <a href="../docs/virtual-list.html#virtual-list-methods-properties">Methods and Properties</a> you can access its initialized instance by accessing <code><b>.f7VirtualList</b></code> component's property.