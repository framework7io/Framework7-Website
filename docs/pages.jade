extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = 'Pages | Framework7 Documentation';

block content
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content
      h1 页面(Pages)
      p <strong>Pages</strong> - 和你在网页中打开的页面是同样的意思.</p>
      p Page 的页面结构如下:
      pre
        code.
          &lt;body&gt;
            ...
            &lt;!-- Views --&gt;
            &lt;div class="views"&gt;
              &lt;!-- Your main view --&gt;
              &lt;div class="view view-main"&gt;
                &lt;!-- Pages --&gt;
                &lt;div class="pages"&gt;
                  &lt;div class="page" data-page="home"&gt;
                    &lt;div class="page-content"&gt;
                      ... page content goes here ...
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
              &lt;!-- Another view --&gt;
              &lt;div class="view another-view"&gt;
                &lt;!-- Pages --&gt;
                &lt;div class="pages"&gt;
                  &lt;div class="page" data-page="home-another"&gt;
                    &lt;div class="page-content"&gt;
                      ... page content goes here ...
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;          
            &lt;/div&gt;
            ...
          &lt;/body&gt;
      p <strong>Pages</strong> 是page在同一个View中的容器. Pages 是必须的，因为所有的页面切换都在这里。
      p 几个重要的提示
      ul
        li
          p 在 main layout(index.html) 中，每一个 <strong>Page</strong> 都应该放在 <strong>Pages</strong> 容器中(<code>&lt;div class="pages"&gt;</code>)，而 <strong>Pages</strong> 必须是 <strong>View</strong> 的子元素(<code>&lt;div class="view"&gt;</code>)。
          p 在 main layout(index.html) 中，每一个 View 和 Pages 中只能有一个 <strong>Page</strong>
      h3 data-page
      p 你会发现每一个 page 都有一个 <code>data-page</code> 属性，存储了一个唯一的page名。这个属性不是必须的，但是强烈推荐使用。
      p 这个属性在 page 事件中或者在<a href="page-callbacks.html">page 回调函数</a>中会非常有用，可以用来帮助我们确定加载的是哪一个页面。
      h3 Page 内容
      p 所有的可见的内容，比如列表和表单等，都应该放在 <code>&lt;div class="page-content"&gt;</code> 中，她是 <code>&lt;div class="page"&gt;</code> 的子元素。这样才能保证正确的样式，布局和滚动。
      h2 Page 事件
      p 现在我们看看页面浏览的时候最重要的一部分 - Page 事件。这些事件可以让我们通过JS来操作加载好的Page。
      table.events-table
        thead
          tr
            th Event
            th Target
            th Description
        tbody
          tr
            td pageBeforeInit
            td Page Element<span>&lt;div class="page"&gt;</span>
            td Event will be triggered when Framework7 just inserts new page to DOM
          tr
            td pageInit
            td Page Element<span>&lt;div class="page"&gt;</span>
            td Event will be triggered after Framework7 initialize required page's components and navbar
          tr
            td pageBeforeAnimation
            td Page Element<span>&lt;div class="page"&gt;</span>
            td Event will be triggered when everything initialized and page (and navbar) is ready to be animated
          tr
            td pageAfterAnimation
            td Page Element<span>&lt;div class="page"&gt;</span>
            td Event will be triggered after page (and navbar) animation
          tr
            td pageBeforeRemove
            td Page Element<span>&lt;div class="page"&gt;</span>
            td Event will be triggered right before Page will be removed from DOM. This event could be very useful if you need to detach some events / destroy some plugins to free memory
      p 有两种方式来使用Page事件:
      pre
        code.
          // Option 1. Using one 'pageInit' handler for all pages (recommended way):
          $$(document).on('pageInit', function (e) {
            // Do something here when page loaded and initialized

          })

          // Option 2. Using live 'pageInit' event handlers for each page (not recommended)
          $$(document).on('pageInit', '.page[data-page="about"]', function (e) {
            // Do something here when page with data-page="about" attribute loaded and initialized
          })
      p 但是如果我们只用一个handler，如果确定我们加载到的页面到底是哪一个呢？为了解决这个问题，我们在事件中提供了一个详细的数据:
      h3 Page 数据
      p 在 Page 事件中，event实例中包含了关于当前Page非常详细的数据：
      pre
        code.
          // Option 1. Using one 'pageInit' handler for all pages (recommended way):
          $$(document).on('pageInit', function (e) {
            // Page Data contains all required information about loaded and initialized page 
            var page = e.detail.page;
          })
      p 在上面的例子中，我们有一个 <code>page</code> 变量存储了页面数据。这个变量是一个对象，有如下属性：
      table.methods-table
        tbody
          tr
            th(colspan="2") Page Data Properties
          tr
            td page.name
            td Contains <span class="parameter-type">string</span> value of <code>data-page</code> attribute
          tr
            td page.url
            td Contains <span class="parameter-type">string</span> URL of just loaded page
          tr
            td page.query
            td <span class="parameter-type">object</span> with URL query parameters. If your page URL is<strong> "about.html?id=10&count=20&color=blue"</strong> then page.query will contain:
              pre
                code
                  | {
                  |   id: '10',
                  |   count: '20',
                  |   color: 'blue'
                  | }                  
          tr
            td page.view
            td <span class="parameter-type">object</span>. View instance that contains this page (if this View was initialized)
          tr
            td page.container
            td Link to Page <span class="parameter-type">HTMLElement</span>
          tr
            td page.from
            td <span class="parameter-type">string</span> - direction of where Page comes from. It will be "right" if you load new page, and "left" - if page comes after you click on "Back" button
          tr
            td page.navbarInnerContainer
            td Link to related "navbar-inner" <span class="parameter-type">HTMLElement</span>. Only for Dynamic Navbars
          tr
            td page.swipeBack
            td <span class="parameter-type">boolean</span>. Equals to <code>true</code> if page animation was initiated by swipe back. Available only within onPageBefore/AfterAnimation callbacks/events.
      p 我们就可以在一个handler中处理不同的页面了:
      pre
        code.
          $$(document).on('pageInit', function (e) {
              var page = e.detail.page;
              // Code for About page
              if (page.name === 'about') {
                  // We need to get count GET parameter from URL (about.html?count=10)
                  var count = page.query.count;
                  // Now we can generate some dummy list
                  var listHTML = '&lt;ul&gt;';
                  for (var i = 0; i &lt; count; i++) {
                      listHTML += '&lt;li&gt;' + i + '&lt;/li&gt;';
                  }
                  listHTML += '&lt;/ul&gt;';
                  // And insert generated list to page content
                  $$(page.container).find('.page-content').append(listHTML);
              }
              // Code for Services page
              if (page.name === 'services') {
                  myApp.alert('Here comes our services!');
              }
          });
      h2 下一步
      p 下面我们必须理解 <a href="linking-pages.html">不同Page间链接</a> 和 <a href="linking-views.html">不同View间链接</a>。还可以看 <a href="page-callbacks.html">Page 回调函数</a> 来处理不同的页面而不用依赖Page事件。
