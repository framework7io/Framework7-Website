extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = '幻灯片(Slider) | Framework7 文档';

block content
  .docs-demo-device
    iframe(width="320", height="548", frameborder="0", scrolling="on")
    .fade-overlay
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content.with-device
      .full-width
        h1 幻灯片(Slider)
        p Framework7自带一个强力的幻灯片组件,集成了启用硬件加速的过渡动画效果和完美的仿native应用行为。他以著名的<a href="http://www.idangero.us/sliders/swiper/">Swiper</a>的方式内置在Framework7中。
        h2 幻灯片HTML布局结构
        p HTML结构相当简单:
        pre
          code
            | &lt;!-- Slider container --&gt;
            | &lt;div class="slider-container"&gt;
            |     &lt;!-- Slides wrapper --&gt;
            |     &lt;div class="slider-wrapper"&gt;
            |         &lt;!-- Slides --&gt;
            |         &lt;div class="slider-slide"&gt;Slide 1&lt;/div&gt;
            |         &lt;div class="slider-slide"&gt;Slide 2&lt;/div&gt;
            |         &lt;div class="slider-slide"&gt;Slide 3&lt;/div&gt;
            |         ... other slides ...
            |     &lt;/div&gt;
            |     &lt;!-- Pagination, if required --&gt;
            |     &lt;div class="slider-pagination"&gt;&lt;/div&gt;
            | &lt;/div&gt;
        p 其中:
        ul
          li
            p <code>slider-container</code> - 幻灯片和分页条的总容器。必需。
            ul
              li
                p <code>slider-wrapper</code> - 附加的幻灯片容器（不包括分页条）。必需。
                ul
                  li
                    p <code>slider-slide</code> - 单个幻灯片元素，可包含任何HTML结构。
              li
                p <code>slider-pagination</code> - 分页条容器。注意，分页条里每一项是自动生成的。可选。

        h2 通过JS初始化幻灯片
        p 现在我们有了幻灯片的HTML结构，还需要通过相关的App方法初始化它:
        .method-wrap
          p
            span.method myApp.slider(<span>sliderContainer</span>, <span>parameters</span>) 
            span - 传入参数初始化幻灯片
          ul.method-parameters
            li
              span.parameter sliderContainer
              |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) HTML容器。 必需。
            li
              span.parameter parameters
              |  - <span class="parameter-type">object</span> - 幻灯片的对象参数。可选。
            
            li.method-returns <strong>方法返回初始化后的幻灯片实例</strong>
        p 举个栗子:
        pre
          code
            | var mySlider = app.slider('.slider-container', {
            |     speed: 400,
            |     spaceBetween: 100
            | });   
        .important-note 注意幻灯片容器在初始化时应该已经在DOM里存在了。所以如果你不是在首页使用幻灯片，应该在<a href="pages.html#page-events">pageInit</a>事件回调里执行初始化操作。
        h2 幻灯片参数
        p 下方是所有可用的参数:
        table.params-table
          thead
            tr
              th Parameter
              th Type
              th Default
              th Description
          tbody
            
            tr
              td initialSlide
              td number
              td 0
              td 初始展示的幻灯片是几页.
            tr
              td spaceBetween
              td number
              td 0
              td 相邻幻灯片间距，单位像素（px）
            tr
              td slidesPerView
              td number
              td 1
              td 每个视图可显示几张幻灯片。（在幻灯片容器里同一时间可容纳展示的幻灯片数量）
            tr
              td direction
              td string
              td 'horizontal'
              td 水平还是垂直滑动。可选值是'horizontal' 或 'vertical' 
            tr
              td speed
              td number
              td 300
              td 2张幻灯片间滑动过渡动画的持续时间，单位毫秒（ms）
            tr
              td preventClicks
              td boolean
              td true
              td 设置为"true"可在滑动过程中阻止页码链接点击事件
            tr
              td preventClicksPropagation
              td boolean
              td true
              td 设置为"true"可在滑动过程中阻止点击事件冒泡
            tr
              th(colspan="4") 分页条相关
            tr
              td pagination
              td string / HTMLElement
              td undefined
              td 指定分页条的DOM节点或HTML字符串 
            tr
              td paginationHide
              td boolean
              td true
              td 当点击幻灯片容器时，切换分页条容器是否可视
            tr
              th(colspan="4") 自动播放
            tr
              td autoplay
              td number
              td -
              td 自动播放模式下，2次滑动切换幻灯片动画间的时间间隙(ms)。如果这个参数没有指定，表示禁用自动播放
            tr
              td autoplayDisableOnInteraction
              td boolean
              td true
              td 设置为false后，自动播放将不会因用户交互（比如手指拨弄滑动）而被停止，他会在每次用户交互后重新开始自动播放
            tr
              th(colspan="4") 导航按钮
            tr
              td nextButton
              td string / HTMLElement
              td undefined
              td 传入HTML字符串或DOM节点，顾名思义，点一下往后翻一页
            tr
              td prevButton
              td string / HTMLElement
              td undefined
              td 传入HTML字符串或DOM节点，顾名思义，点一下往前翻一页
            tr
              td indexButton
              td string / HTMLElement
              td undefined
              td 传入HTML字符串或DOM节点，使分页条的每一项成为可点击的链接，点击哪一项则幻灯片滑动至对应页码的幻灯片显示
            tr
              th(colspan="4") 回调函数
            tr
              td onSlideChangeStart(slider)
              td function
              td 
              td 当幻灯片开始滑动动画（向前或后均可）时执行。接受一个幻灯片实例对象作为参数
            tr
              td onSlideChangeEnd(slider)
              td function
              td 
              td 当幻灯片结束滑动动画（向前或后均可）时执行。接受一个幻灯片实例对象作为参数
            tr
              td onTouchStart(slider, event)
              td function
              td 
              td 当用户开始触摸幻灯片范围时执行。接受一个幻灯片实例对象和'touchstart'事件作为参数
            tr
              td onTouchMove(slider, event)
              td function
              td 
              td 当用户按住幻灯片范围并移动手指时执行。接受一个幻灯片实例对象和'touchmove'事件作为参数
            tr
              td onOppositeTouchMove(slider, event)
              td function
              td 
              td 当用户按住幻灯片范围并以与"direction"参数值相反的方式移动手指时执行。接受一个幻灯片实例对象和'touchmove'事件作为参数
            tr
              td onSliderMove(slider, event)
              td function
              td 
              td 当幻灯片开始移动时执行，在onTouchMove之后触发。接受一个幻灯片实例对象和'touchmove'事件作为参数
            tr
              td onTouchEnd(slider, event)
              td function
              td 
              td 当用户结束触摸并释放手指时执行。接受一个幻灯片实例对象和'touchend'事件作为参数
            tr
              td onClick(slider, event)
              td function
              td 
              td 当用户点击/轻敲幻灯片区域300ms后执行。接受一个幻灯片实例对象和'touchend'事件作为参数
            tr
              td onTap(slider, event)
              td function
              td 
              td 当用户轻敲幻灯片区域时执行。接受一个幻灯片实例对象和'touchend'事件作为参数
            tr
              td onDoubleTap(slider, event)
              td function
              td 
              td 当用户连续2次轻敲幻灯片区域时执行。接受一个幻灯片实例对象和'touchend'事件作为参数
            tr
              th(colspan="4") 命名空间
            tr
              td slideClass
              td string
              td 'slider-slide'
              td 幻灯片组件的css命名空间
            tr
              td slideActiveClass
              td string
              td 'slider-slide-active'
              td 当前显示的幻灯片元素的class命名空间
            tr
              td slideNextClass
              td string
              td 'slider-slide-next'
              td 紧邻当前显示的幻灯片下一张的class命名空间
            tr
              td slidePrevClass
              td string
              td 'slider-slide-prev'
              td 紧邻当前显示的幻灯片上一张的class命名空间
            tr
              td wrapperClass
              td string
              td 'slider-wrapper'
              td 幻灯片容器的class命名空间
            tr
              td bulletClass
              td string
              td 'slider-pagination-bullet'
              td 分页条中每一项(表示每一页的那个点)的class命名空间
            tr
              td bulletActiveClass
              td string
              td 'slider-pagination-active'
              td 分页条中当前显示项的class命名空间
        h2 幻灯片方法和属性
        p 在我们初始化幻灯片后，我们拥有他的实例化对象(上面的例子里类似<code>mySlider</code>变量),他本身带有一些方法和属性:
        table.methods-table
          tbody
            tr
              th(colspan="2") 属性
            tr
              td mySlider.params
              td 初始化时传入的参数
            tr
              td mySlider.container
              td <a href="dom.html">Dom7</a>对象：幻灯片外层容器的HTML元素
            tr
              td mySlider.slides
              td <a href="dom.html">Dom7</a>对象：每一张幻灯片的HTML元素集合
            tr
              td mySlider.activeSlideIndex
              td 当前显示的幻灯片的序号
            tr
              td mySlider.previousSlideIndex
              td 上一次显示的幻灯片的序号
            tr
              td mySlider.isFirst
              td 当前幻灯片是否是在最左（或最上）的位置
            tr
              td mySlider.isLast
              td 当前幻灯片是否是在最右（或最下）的位置
            tr
              th(colspan="2") 方法
            tr
              td mySlider.slideNext();
              td 滑动到下一张
            tr
              td mySlider.slidePrev();
              td 滑动到上一张
            tr
              td(rowspan="2") mySlider.slideTo(<span>index</span>, <span>speed</span>);
              td 
                ul.method-parameters
                  li
                    span.parameter index
                    |  - <span class="parameter-type">number</span> - 目标页的页码序号
                  li
                    span.parameter speed
                    |  - <span class="parameter-type">number</span> - 滑动动画持续时间

            tr
              td 执行滑动动画到某张特定页码序号的幻灯片等效于'index'参数，持续时间等效于'speed'参数
            tr
              td mySlider.updateSlides();
              td 该方法会重新计算幻灯片数量和他们的位置。当你通过JS动态添加了一些幻灯片时会有用
            tr
              td mySlider.updateSize();
              td 重新计算幻灯片大小，在你通过JS动态修改幻灯片大小后会有用
            tr
              td mySlider.detachEvents();
              td 取消所有的事件监听器
            tr
              td mySlider.attachEvents();
              td 重新添加所有的事件监听器
            tr
              td mySlider.destroy();
              td 销毁幻灯片实例并解除所有事件监听器
        h2 通过HTML、无JS方式初始化
        p If you don't need Slider callback you can initialize slider using HTML without JavaScript. You can do that just by adding additional "slider-init" class to <code>slider-container</code>
        p 如果你不需要幻灯片组件的回调函数，那你可以通过HTML、无JS方式初始化。只需添加"slider-init"这个class到<code>slider-container</code>上
        pre
          code
            | &lt;!-- slider-init to initialize slider automatically --&gt;
            | &lt;div class="slider-container slider-init"&gt;
            |     &lt;div class="slider-wrapper"&gt;
            |         &lt;div class="slider-slide"&gt;Slide 1&lt;/div&gt;
            |         &lt;div class="slider-slide"&gt;Slide 2&lt;/div&gt;
            |         &lt;div class="slider-slide"&gt;Slide 3&lt;/div&gt;
            |         ... other slides ...
            |     &lt;/div&gt;
            | &lt;/div&gt;  
        p 各种配置参数通过<b>data-</b>属性传入:
        pre
          code
            | &lt;!-- slider properties in data- attributes --&gt;
            | &lt;div class="slider-container slider-init" data-speed="400" data-spaceBetween="40" data-pagination=".slider-pagination"&gt;
            |     &lt;div class="slider-wrapper"&gt;
            |         &lt;div class="slider-slide"&gt;Slide 1&lt;/div&gt;
            |         &lt;div class="slider-slide"&gt;Slide 2&lt;/div&gt;
            |         &lt;div class="slider-slide"&gt;Slide 3&lt;/div&gt;
            |         ... other slides ...
            |     &lt;/div&gt;
            |     &lt;div class="slider-pagination"&gt;&lt;/div&gt;
            | &lt;/div&gt;        
        p 或者将所有参数以<strong>合法的JSON格式</strong>放在 data-slider属性里:
        pre
          code
            | &lt;!-- slider properties in JSON format in data-slider attribute --&gt;
            | &lt;div class="slider-container slider-init" data-slider="{'speed':'400', 'spaceBetween':'40', 'pagination': '.slider-pagination'}"&gt;
            |     &lt;div class="slider-wrapper"&gt;
            |         &lt;div class="slider-slide"&gt;Slide 1&lt;/div&gt;
            |         &lt;div class="slider-slide"&gt;Slide 2&lt;/div&gt;
            |         &lt;div class="slider-slide"&gt;Slide 3&lt;/div&gt;
            |         ... other slides ...
            |     &lt;/div&gt;
            |     &lt;div class="slider-pagination"&gt;&lt;/div&gt;
            | &lt;/div&gt;
        h2 得到幻灯片组件实例对象
        p 即使你通过纯HTML方式初始化组件，仍然有场景需要获取实例对象，他被挂载在幻灯片容器元素的'f7Slider'属性上：
        pre
          code
            | var mySlider = $$('.slider-container')[0].f7Slider;
            | 
            | // Now you can use all slider methods like
            | mySlider.slideNext();

      h2 一堆栗子
      h3(data-device-preview="../docs-demos/slider-default.html") 有分页条的默认幻灯片形式 
      pre
        code
          | /* A bit of demo styles */;
          | .slider-slide {
          |   background:#fff;
          | }
          | .slider-slide span {
          |   text-align:center;
          |   display:block;
          |   margin:20px;
          |   font-size:21px;
          | }
      pre
        code
          | ...
          | &lt;div class="page-content"&gt;
          |   &lt;!-- Slider --&gt;
          |   &lt;div class="slider-container"&gt;
          |     &lt;div class="slider-wrapper"&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 1&lt;/span&gt;&lt;/div&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 2&lt;/span&gt;&lt;/div&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 3&lt;/span&gt;&lt;/div&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 4&lt;/span&gt;&lt;/div&gt;
          |     &lt;/div&gt;
          |     &lt;div class="slider-pagination"&gt;&lt;/div&gt;
          |   &lt;/div&gt;
          | &lt;/div&gt;
          | ...
      pre
        code
          |   var myApp = new Framework7(); 
          | 
          |   // Init slider and store its instance in mySlider variable
          |   var mySlider = myApp.slider('.slider-container', {
          |     pagination:'.slider-pagination'
          |   });
            
      h3(data-device-preview="../docs-demos/slider-vertical.html") 垂直幻灯片
      p 除了滑动方向，其余均和默认形式相同
      pre
        code
          |   var myApp = new Framework7(); 
          | 
          |   // Init slider and store its instance in mySlider variable
          |   var mySlider = myApp.slider('.slider-container', {
          |     pagination:'.slider-pagination',
          |     direction: 'vertical'
          |   });
      div(style="height:200px")
      h3(data-device-preview="../docs-demos/slider-space.html") 2张幻灯片间留有空白区域
      pre
        code
          |   var myApp = new Framework7(); 
          | 
          |   // Init slider and store its instance in mySlider variable
          |   var mySlider = myApp.slider('.slider-container', {
          |     pagination:'.slider-pagination',
          |     spaceBetween: 100 // 100px between slides
          |   });
      div(style="height:200px")
      h3(data-device-preview="../docs-demos/slider-multiple.html") 多重幻灯片
      pre
        code
          | .slider-slide {
          |   background: #fff;
          |   box-sizing: border-box;
          |   border: 1px solid #ccc;
          | }
          | .slider-slide span {
          |   text-align:center;
          |   display:block;
          |   margin: 20px;
          |   font-size:21px;
          | }
          | .slider-container {
          |   height: 120px;
          |   margin: 35px 0;
          | }
      pre
        code
          | &lt;div class="page-content"&gt;
          | 
          |   &lt;div class="content-block-title"&gt;1 Slide Per View, 50px Between&lt;/div&gt;
          |   &lt;div class="slider-container slider-1"&gt;
          |     &lt;div class="slider-pagination"&gt;&lt;/div&gt;
          |     &lt;div class="slider-wrapper"&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 1&lt;/span&gt;&lt;/div&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 2&lt;/span&gt;&lt;/div&gt;
          |       ...
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 10&lt;/span&gt;&lt;/div&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | 
          |   &lt;div class="content-block-title"&gt;2 Slides Per View, 20px Between&lt;/div&gt;
          |   &lt;div class="slider-container slider-2"&gt;
          |     &lt;div class="slider-pagination"&gt;&lt;/div&gt;
          |     &lt;div class="slider-wrapper"&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 1&lt;/span&gt;&lt;/div&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 2&lt;/span&gt;&lt;/div&gt;
          |       ...
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 10&lt;/span&gt;&lt;/div&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | 
          |   &lt;div class="content-block-title"&gt;3 Slides Per View, 10px Between&lt;/div&gt;
          |   &lt;div class="slider-container slider-3"&gt;
          |     &lt;div class="slider-pagination"&gt;&lt;/div&gt;
          |     &lt;div class="slider-wrapper"&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 1&lt;/span&gt;&lt;/div&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 2&lt;/span&gt;&lt;/div&gt;
          |       ...
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 10&lt;/span&gt;&lt;/div&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | 
          |   &lt;div class="content-block-title"&gt;Vertical, 0px Between&lt;/div&gt;
          |   &lt;div class="slider-container slider-vertical"&gt;
          |     &lt;div class="slider-pagination"&gt;&lt;/div&gt;
          |     &lt;div class="slider-wrapper"&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 1&lt;/span&gt;&lt;/div&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 2&lt;/span&gt;&lt;/div&gt;
          |       ...
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 5&lt;/span&gt;&lt;/div&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | 
          |   &lt;div class="content-block-title"&gt;Slow speed&lt;/div&gt;
          |   &lt;div class="slider-container slider-slow"&gt;
          |     &lt;div class="slider-pagination"&gt;&lt;/div&gt;
          |     &lt;div class="slider-wrapper"&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 1&lt;/span&gt;&lt;/div&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 2&lt;/span&gt;&lt;/div&gt;
          |       ...
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 10&lt;/span&gt;&lt;/div&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | 
          | &lt;/div&gt;  
      pre
        code
          | var myApp = new Framework7(); 
          | 
          | // 1 Slide Per View, 50px Between
          | var mySlider1 = myApp.slider('.slider-1', {
          |   pagination:'.slider-1 .slider-pagination',
          |   spaceBetween: 50
          | });
          | 
          | // 2 Slides Per View, 20px Between
          | var mySlider2 = myApp.slider('.slider-2', {
          |   pagination:'.slider-2 .slider-pagination',
          |   spaceBetween: 20,
          |   slidesPerView: 2
          | });
          | 
          | // 3 Slides Per View, 10px Between
          | var mySlider3 = myApp.slider('.slider-3', {
          |   pagination:'.slider-3 .slider-pagination',
          |   spaceBetween: 10,
          |   slidesPerView: 2
          | });
          | 
          | // Vertical, 0px Between
          | var mySliderVertical = myApp.slider('.slider-vertical', {
          |   pagination:'.slider-vertical .slider-pagination',
          |   direction: 'vertical'
          | });
          | 
          | // Slow speed
          | var mySliderSlow = myApp.slider('.slider-slow', {
          |   pagination:'.slider-slow .slider-pagination',
          |   speed: 600
          | });                  
      h3(data-device-preview="../docs-demos/slider-nested.html") 混合模式的幻灯片
      p 我们依然可以使用纯HTML初始化:
      pre
        code
          | .slider-slide {
          |   background:#fff;
          | }
          | .slider-slide span {
          |   text-align:center;
          |   display:block;
          |   margin:20px;
          |   font-size:21px;
          | }
      pre
        code
          | &lt;div class="page-content"&gt;
          |   &lt;!-- Horizontal parent slider --&gt;
          |   &lt;div data-pagination=".slider-pagination-h" data-paginationHide="false" class="slider-container slider-init"&gt;
          |     &lt;div class="slider-pagination slider-pagination-h"&gt;&lt;/div&gt;
          |     &lt;div class="slider-wrapper"&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Horizontal Slide 1&lt;/span&gt;&lt;/div&gt;
          |       &lt;div class="slider-slide"&gt;
          | 
          |         &lt;!-- Vertical nested child slider --&gt;
          |         &lt;div class="slider-container slider-init" data-pagination=".slider-pagination-v" data-direction="vertical" data-paginationHide="false"&gt;
          |           &lt;div class="slider-pagination slider-pagination-v"&gt;&lt;/div&gt;
          |           &lt;div class="slider-wrapper"&gt;
          |             &lt;div class="slider-slide"&gt;&lt;span&gt;Vertical Slide 1&lt;/span&gt;&lt;/div&gt;
          |             &lt;div class="slider-slide"&gt;&lt;span&gt;Vertical Slide 2&lt;/span&gt;&lt;/div&gt;
          |             &lt;div class="slider-slide"&gt;&lt;span&gt;Vertical Slide 3&lt;/span&gt;&lt;/div&gt;
          |           &lt;/div&gt;
          |         &lt;/div&gt;
          | 
          |       &lt;/div&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Horizontal Slide 3&lt;/span&gt;&lt;/div&gt;
          |       &lt;div class="slider-slide"&gt;&lt;span&gt;Horizontal Slide 4&lt;/span&gt;&lt;/div&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | 
          | &lt;/div&gt; 
      h3(data-device-preview="../docs-demos/slider-custom.html") 自定义控制元素
      pre
        code
          | &lt;div class="page-content"&gt;
          |   &lt;div class="slider-custom"&gt;
          |     &lt;div class="slider-container"&gt;
          |       &lt;div class="slider-pagination"&gt;&lt;/div&gt;
          |       &lt;div class="slider-wrapper"&gt;
          |         &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 1&lt;/span&gt;&lt;/div&gt;
          |         &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 2&lt;/span&gt;&lt;/div&gt;
          |         &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 3&lt;/span&gt;&lt;/div&gt;
          |         &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 4&lt;/span&gt;&lt;/div&gt;
          |         &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 5&lt;/span&gt;&lt;/div&gt;
          |         &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 6&lt;/span&gt;&lt;/div&gt;
          |         &lt;div class="slider-slide"&gt;&lt;span&gt;Slide 7&lt;/span&gt;&lt;/div&gt;
          |       &lt;/div&gt;
          |     &lt;/div&gt;
          |     &lt;a href="#" class="slider-prev-button"&gt;&lt;i class="icon icon-prev-blue"&gt;&lt;/i&gt;&lt;/a&gt;
          |     &lt;a href="#" class="slider-next-button"&gt;&lt;i class="icon icon-next-blue"&gt;&lt;/i&gt;&lt;/a&gt;
          |   &lt;/div&gt;
          | &lt;/div&gt;
      pre
        code
          | .slider-custom {
          |   position:relative;
          |   height:100%;
          | }
          | .slider-slide {
          |   background: #fff;
          | }
          | .slider-slide span {
          |   text-align:center;
          |   display:block;
          |   margin: 20px;
          |   font-size:21px;
          | }
          | .slider-prev-button, .slider-next-button {
          |   position: absolute;
          |   width:44px;
          |   background: rgba(0,0,0,0.7);
          |   top: 50%;
          |   margin-top: -22px;
          |   line-height: 44px;
          |   text-align:center;
          | }
          | .slider-prev-button {
          |   left:0;
          | }
          | .slider-next-button {
          |   right:0;
          | }
          | .slider-pagination-bullet {
          |   width: 10px;
          |   height: 10px;
          |   background: none;
          |   border:1px solid #aaa;
          |   border-radius: 0 0 0 0;
          |   opacity:1;
          |   cursor: pointer;
          | }
          | .slider-pagination-active {
          |   background: #007aff;
          |   border-color: #007aff;
          | }   
      pre
        code
          | var myApp = new Framework7(); 
          | 
          | var mySlider = myApp.slider('.slider-container', {
          |   pagination: '.slider-pagination',
          |   paginationHide: false,
          |   nextButton: '.slider-next-button',
          |   prevButton: '.slider-prev-button',
          |   indexButton: '.slider-pagination-bullet'
          | });                         
      
