extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = 'Navigation and linking between pages in Framework7 | Framework7 Documentation';

block content
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content
      h1 页面间跳转和链接
      p 我们有了一个有View和Page的应用结构，现在我们需要理解如何创建新的Page，以及Framework7是如何加载他们的。
      p 下面有两个重要的地方请注意：
      div.important-note.
        p <b>默认情况下 Framework7 会使用 Ajax 加载所有的页面</b>，除了带有 <b>external</b> class的链接（<b>&lt;a href="somepage.html" class="external"></b>）和没有正确 <b>href</b> 值的链接（比如是空的或者是 <b>#</b>）。
        p 在 <a href="init-app.html">初始化</a> 时候传递不同的 <b>ajaxLinks</b> 参数可以改变这个行为。
      p 所以我们如果需要创建一个链接指向 <code>about.html</code>，我们只需要按照平时一样写 <code>&lt;a&gt;</code>标签就可以：
      pre <code>&lt;a href="about.html"&gt;Go to About page&lt;/a&gt;</code>
      p 当我们点击这个链接的时候，Framework7会通过Ajax获取 <code>about.html</code>，解析它的内容，然后把它插入到DOM中，并且做一个动画切换到这个新页面。
      h2 Page 内部的结构
      p 因为Framework7有一个非常聪明的解析器，所以在内部页面中我们不需要完整的HTML结构（head,body,views,pages等)。比如 <code>about.html</code> 的内容：
      pre
        code.
          &lt;-- That is all we have in about.html file --&gt;
          &lt;div class="page" data-page="about"&gt;
          ... About page content goes here
          &lt;/div&gt;
      p 重点是，Framework7 解析器会尝试在ajax加载的页面中寻找 <code>&lt;div class="page"&gt;</code>，所以我们不需要完整的HTML结构。当然这不是强制的，你可以写出完整的页面结构。
      h2 多个Page的结构
      p 下面有一个复杂一点的情况。比如，我们有两个 <a href="views.html">初始化的View</a>。在我们的index文件中：
      pre
        code.
          &lt;body&gt;
            ...
            &lt;!-- Views --&gt;
            &lt;div class="views"&gt;
              &lt;!-- Left view --&gt;
              &lt;div class="view view-main left-view"&gt;
                &lt;!-- Navbar--&gt;
                &lt;!-- Pages --&gt;
                  &lt;a href="about.html"&gt; About &lt;/a&gt;
                &lt;!-- Toolbar--&gt;
              &lt;/div&gt;
              &lt;!-- Right view --&gt;
              &lt;div class="view right-view"&gt;
                &lt;!-- Navbar--&gt;
                &lt;!-- Pages --&gt;
                  &lt;a href="about.html"&gt; About &lt;/a&gt;
                &lt;!-- Toolbar--&gt;
              &lt;/div&gt;          
            &lt;/div&gt;
            ...
          &lt;/body&gt;
      p 如上例所示，我们有两个View，并且她们都有一个链接指向 <code>about.html</code>。并且，我们希望在不同的 View 中跳转到 <code>about.html</code> 页面时显示的是不同的内容。
      p 我们看看这种情况下 <code>about.html</code> 应该是什么样的：
      pre
        code.
          &lt;!-- Left view --&gt;
          &lt;div class="view view-main left-view"&gt;
            &lt;div class="page" data-page="about-right"&gt;
              ... This page will be loaded when you click about.html link from Left view ...
            &lt;/div&gt;          
          &lt;/div&gt;
          &lt;!-- Right view --&gt;
          &lt;div class="view right-view"&gt;
            &lt;div class="page" data-page="about-right"&gt;
              ... This page will be loaded when you click about.html link from Right view ...
            &lt;/div&gt;          
          &lt;/div&gt;
      p 最关键的地方是，在 <code>about.html</code> 中的两个view应该和主页中的view有相同的class。这样Framework7就知道应该哪一个page应该放在哪一个view中。
      h2 动态导航栏的文件结构
      p 在<a href="navbar-toolbar-layouts.html">导航栏和工具栏布局类型</a>中，你会看到动态导航栏需要 through-type 布局。但是这种布局类型的工具栏不在Page中，所以我们需要放在放在 <code>about.html</code> 中的正确位置：
      pre
        code.
          &lt;div class="navbar"&gt;
            ... Navbar content goes here
          &lt;/div&gt;

          &lt;div class="page" data-page="about"&gt;
            ... About page content goes here
          &lt;/div&gt;
      p 我们只需要把工具栏放在Page的兄弟节点上即可。如果你需要不同的Page有不同的工具栏，只需要像上面一样把她们（Page 和工具栏)放在正确的 View中即可。
      h2 后退
      p 只需要给链接加上一个 <b>back</b> class 就可以了。下面是 <code>about.html</code> 页面的结构，她有一个链接会回退到 <code>index.html</code> 页面。
      pre
        code.
          &lt;div class="page" data-page="about"&gt;
            &lt;-- Just add additional "back" class to link --&gt;
            &lt;a href="index.html" class="back"&gt; Go back to home page &lt;/a&gt;
          &lt;/div&gt;
      p 关于后退链接几个需要注意的地方：
      div.important-note
        ul
          li
            p 如果在浏览历史中有页面，Framework7会忽略掉 <b>href</b> 属性中的值。
          li
            p 如果在浏览历史中没有页面（比如你在首页点了后退），Framework7 会加载 href 属性指定的url。
            p 你无法改变上述行为。
      p 对后退链接来说， <code>href</code> 属性不是必须得，但是为了向下兼容，最好还是写上。
      h2 滑动后退
      p 如果你启用了 "swipeBackPage" <a href="init-app.html">应用参数</a>，那么你可以通过从左向右滑动来后退到上一个页面。但是有时候你会想在某些页面中禁用这个行为，这种情况下你只需要加一个 <b>no-swipeback</b> class 即可。
      pre
        code.
          &lt;div class="page no-swipeback"&gt;
              ...
          &lt;/div&gt;
      h2 取消页面切换动画
       有时候你在加载页面或者后退的时候需要立刻执行，不想要一个切换的动画效果，可以通过增加一个 "no-animation" class 在链接上即可。
      pre
        code.
          &lt;div class="page" data-page="about"&gt;
            &lt;-- Add additional "no-anmation" class to link to diable animated page transition --&gt;
            &lt;a href="about.html" class="no-animation"&gt; Load About page immediately &lt;/a&gt;

            &lt;-- The same rule for back link --&gt;
            &lt;a href="index.html" class="back no-animation"&gt; Go back immediately &lt;/a&gt;
          &lt;/div&gt;
      h2 通过JS加载页面
      p 可以直接通过JS加载页面而不一定需要 <code>&lt;a&gt;</code> 标签。比如我们可以通过使用 <code>.loadPage(url)</code> 来加载：
      pre
        code.
          // Initialize App  
          var myApp = new Framework7();

          // Initialize View          
          var mainView = myApp.addView('.view-main')          

          // Load page from about.html file to main View:
          mainView.loadPage('about.html');
      p 注意，必须先加载对应的 View 才可以。
      h2 通过JS后退
      p 直接调用<a href="views.html">View's</a>中的 <code>.goBack(url)</code> 方法即可实现后退:
      pre
        code.
          // Initialize App  
          var myApp = new Framework7();

          // Initialize View          
          var mainView = myApp.addView('.view-main')          

          // Go back on main View
          mainView.goBack();
      p 这个方法也只对初始化之后的View才可用
      h2 结论
      p 在Framework7中，页面切换和链接都很简单。但是还是有如下几点需要注意的：
      ul
        li
          p 你需要使用普通的 <code>&lt;a&gt;</code> 标签，她有一个href属性指向你需要加载的页面。
        li
          p 通过ajax加载的页面不需要有完整的HTML结构。只需要有 <b>&lt;div class="page"&gt;</b> (和 <b>&lt;div class="navbar"&gt;</b> 如果你需要动态的滚动条)
        li
          p 如果你在同一个文件中有多个Page，把他们用 <b>&lt;div class="view"&gt;</b> 包裹起来，并且给每一个View设置好正确的class。
        li
          p 只需给一个链接加上 back class (<b>&lt;a href="index.html" class="back"&gt;</b>)，她就会自动变成一个后退链接。
      h2 下一步
      p 让我们看看如果做 <a href="linking-views.html">View 间的链接</a>
